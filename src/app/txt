'use client';
import Link from 'next/link';
import Contenido from './Contenido';
import { Button } from 'primereact/button';
import { Dialog } from 'primereact/dialog';
import { useEffect, useRef, useState } from 'react';
import { DataTable } from 'primereact/datatable';
import { Column } from 'primereact/column';
import { InputText } from 'primereact/inputtext';
import { Menubar } from 'primereact/menubar';

import { Messages } from 'primereact/messages';
import { Toast } from 'primereact/toast';
import { Dropdown } from 'primereact/dropdown';
import { Fieldset } from 'primereact/fieldset';
import { InputTextarea } from 'primereact/inputtextarea';
import TuComponente from './MiComponente';
import axios from 'axios';
const IndexPage = () => {
    // Estados de los usuarios
    const [usuarios, setUsuarios] = useState([]);
    const [usuarioSeleccionado, setUsuarioSeleccionado] = useState({});
    const [nombreCategoria, setnombreCategoria] = useState('')
    const [usuarioInput, setUsuarioInput] = useState({
        id: '',
        nombre: '',
        apellidos: '',
        // Agrega más campos según tus necesidades
    });
    const [visibleEditarUsuario, setVisibleEditarUsuario] = useState(false); // Estado para controlar la visibilidad del diálogo de editar usuario

    // Estados de los prestamos
    const [prestamos, setPrestamos] = useState([]);
    const [libroSeleccionadoPrestamo, setLibroSeleccionadoPrestamo] = useState({});
    const [usuarioSeleccionadoPrestamo, setUsuarioSeleccionadoPrestamo] = useState({});
    const [prestamoInput, setPrestamoInput] = useState({
        idPrestamo: '',
        fechaPrestamo: '',
        libro: { nombre: '' },
        usuario: { nombre: '' },
        // Agrega más campos según tus necesidades
    });
    const [visibleFichaPrestamo, setVisibleFichaPrestamo] = useState(false);

    // Estados de búsqueda y resultados
    const [resultadosBusqueda, setResultadosBusqueda] = useState([]);
    const [mostrarResultadosUsuarios, setMostrarResultadosUsuarios] = useState(false); // Estado para controlar la visibilidad del segundo Dialog
    const [mostrarResultadosLibros, setMostrarResultadosLibros] = useState(false);

    // Función para abrir el diálogo de editar usuario
    const editarUsuario = (usuario) => {
        setUsuarioSeleccionado(usuario);
        setUsuarioInput(usuario);
        setVisibleEditarUsuario(true);
    };

    // Función para cerrar el diálogo de editar usuario
    const cerrarEditarUsuario = () => {
        setVisibleEditarUsuario(false);
    };

    const actualizarUsuario = () => {
        // Realizar la solicitud PUT para actualizar el usuario con los datos del usuarioInput
        axios.put(`http://localhost:8080/biblioteca/usuarios/update/${usuarioInput.id}`, usuarioInput)
            .then(response => {
                // Actualizar el estado de los usuarios con los nuevos datos del usuario actualizado
                const nuevosUsuarios = usuarios.map(user => {
                    if (user.id === usuarioInput.id) {
                        return usuarioInput; // Reemplazar el usuario antiguo con el nuevo
                    }
                    return user;
                });
                setUsuarios(nuevosUsuarios);
                // Ocultar el diálogo de edición
                setVisibleEditarUsuario(false);
                // Mostrar un mensaje de éxito
                toast.current.show({ severity: 'success', summary: 'Éxito', detail: 'Usuario actualizado correctamente', life: 3000 });
            })
            .catch(error => {
                // Manejar el error en caso de fallo en la solicitud PUT
                console.error("Error al actualizar usuario:", error);
                // Mostrar un mensaje de error
                toast.current.show({ severity: 'error', summary: 'Error', detail: 'Error al actualizar el usuario', life: 3000 });
            });
    };

    // Función para cerrar el diálogo de editar prestamo
    const cerrarEditarPrestamo = () => {
        setVisibleFichaPrestamo(false);
    };

    // Función para actualizar un prestamo
    const actualizarPrestamo = () => {
        const nuevoPrestamo = { libro: libroSeleccionadoPrestamo, usuario: usuarioSeleccionadoPrestamo };
        // Realizar la solicitud PUT para actualizar el prestamo con los datos del prestamoInput
        axios.put(`http://localhost:8080/biblioteca/prestamos/${prestamoInput.idPrestamo}`, nuevoPrestamo)
            .then(response => {
                // Actualizar el estado de los prestamos con los nuevos datos del prestamo actualizado
                const nuevosPrestamos = prestamos.map(prestamo => {
                    if (prestamo.idPrestamo === prestamoInput.idPrestamo) {
                        return prestamoInput; // Reemplazar el prestamo antiguo con el nuevo
                    }
                    return prestamo;
                });
                setPrestamos(nuevosPrestamos);
                setPrestamoSeleccionado({});
                setLibroSeleccionadoPrestamo({});
                setUsuarioSeleccionadoPrestamo({});
                setPrestamoInput({
                    idPrestamo: '',
                    nombre: '',
                    autor: '',
                    editorial: '',
                    categoria: {},
                    usuario: { nombre: '' },
                    libro: { nombre: '' }
                });
                // Ocultar el diálogo de edición
                setVisibleFichaPrestamo(false);
                // Mostrar un mensaje de éxito
                toast.current.show({ severity: 'success', summary: 'Éxito', detail: 'Prestamo actualizado correctamente', life: 3000 });
            })
            .catch(error => {
                // Manejar el error en caso de fallo en la solicitud PUT
                console.error("Error al actualizar prestamo:", error);
                // Mostrar un mensaje de error
                toast.current.show({ severity: 'error', summary: 'Error', detail: 'Error al actualizar el prestamo', life: 3000 });
            });
    };




    const toast = useRef(null);
    const [visibleCrearUsuario, setVisibleCrearUsuario] = useState(false); // Estado para controlar la visibilidad del diálogo de creación de usuarios

    const [categorias, setCategorias] = useState([]);
    const [categoriaSeleccionada, setCategoriaSeleccionada] = useState({});
    const [visibleFichaCategoria, setvisibleFichaCategoria] = useState(false);
    const [visible, setVisible] = useState(false);
    const [visibleCrear, setVisibleCrear] = useState(false)
    const [categoriaSeleccionadaLibro, setCategoriaSeleccionadaLibro] = useState('');
    const [categoriaInput, setCategoriaInput] = useState({
        id: '',
        categoria: ''
    });
    const [visiblePrestamos, setVisiblePrestamos] = useState(false)
    const [visibleCrearPrestamo, setVisibleCrearPrestamo] = useState(false)
    const [searchText, setSearchText] = useState('');
    const [sortField, setSortField] = useState('');
    const [filteredLibros, setFilteredLibros] = useState([]);
    const [prestamoSeleccionado, setPrestamoSeleccionado] = useState({})
    const [visibleLibro, setVisibleLibro] = useState(false);
    const [visibleFichaLibro, setVisibleFichaLibro] = useState(false);
    const [libros, setLibros] = useState([]);
    const [libroSeleccionado, setLibroSeleccionado] = useState({});
    const [libroInput, setLibroInput] = useState({
        id: '',
        nombre: '',
        autor: '',
        editorial: '',
        categoria: {}
    });


    const [visibleCrearLibro, setVisibleCrearLibro] = useState(false);
    useEffect(() => {

        // Aplicar el filtro y ordenar según el campo seleccionado
        const filtered = libros.filter(libro =>
            libro[sortField].toLowerCase().includes(searchText.toLowerCase())
        );

        if (sortField) {
            filtered.sort((a, b) => (a[sortField] > b[sortField]) ? 1 : -1);
        }

        setFilteredLibros(filtered);
    }, [libros, searchText, sortField]);


    // Crea una función para mostrar u ocultar el diálogo de creación de libros
    const toggleCrearLibroDialog = () => {
        setVisibleCrearLibro(!visibleCrearLibro);
    };

    useEffect(() => {
        setSortField("nombre");
        // Obtener categorías de la API
        axios.get("http://localhost:8080/biblioteca/categorias")
            .then(response => {
                setCategorias(response.data);
            })
            .catch(error => {
                console.error("Error al obtener categorías:", error);
            });
        axios.get("http://localhost:8080/biblioteca/prestamos")
            .then(response => {
                setPrestamos(response.data);

                console.log(prestamos);
            })
            .catch(error => {
                console.error("Error al obtener categorías:", error);
            });


        // Obtener libros de la API
        axios.get("http://localhost:8080/biblioteca/libros")
            .then(response => {
                setLibros(response.data);
            })
            .catch(error => {
                console.error("Error al obtener libros:", error);
            });
        // Función para obtener la lista de usuarios desde la API

        axios.get("http://localhost:8080/biblioteca/usuarios")
            .then(response => {
                // Al recibir la respuesta exitosa, actualiza el estado de los usuarios
                setUsuarios(response.data);
            })
            .catch(error => {
                // En caso de error, muestra un mensaje en la consola
                console.error("Error al obtener usuarios:", error);
                // Aquí podrías manejar el error de alguna manera, como mostrar un mensaje al usuario
            });


    }, []);

    const modificarCategoria = (categoria) => {
        setCategoriaSeleccionada(categoria);
        setCategoriaInput(categoria);
    };
    const eliminarCategoria = (id) => {
        axios.delete(`http://localhost:8080/biblioteca/categorias/${id}`)
            .then(response => {
                const nuevasCategorias = categorias.filter(cat => cat.id !== id);
                setCategorias(nuevasCategorias);
                setvisibleFichaCategoria(false);
                toast.current.show({ severity: 'success', summary: 'Éxito', detail: 'Categoría eliminada correctamente', life: 3000 });
            })
            .catch(error => {
                console.error("Error al eliminar categoría:", error);
                toast.current.show({ severity: 'error', summary: 'Error', detail: 'Error al eliminar la categoría', life: 3000 });
            });
    };

    const eliminarLibro = (id) => {
        axios.delete(`http://localhost:8080/biblioteca/libros/${id}`)
            .then(response => {
                const nuevosLibros = libros.filter(libro => libro.id !== id);
                setLibros(nuevosLibros);
                setVisibleFichaLibro(false);
                toast.current.show({ severity: 'success', summary: 'Éxito', detail: 'Libro eliminado correctamente', life: 3000 });
            })
            .catch(error => {
                console.error("Error al eliminar libro:", error);
                toast.current.show({ severity: 'error', summary: 'Error', detail: 'Error al eliminar el libro', life: 3000 });
            });
    };

    const eliminarPrestamo = (id) => {
        axios.delete(`http://localhost:8080/biblioteca/prestamos/${id}`)
            .then(response => {
                const nuevosLibros = prestamos.filter(libro => libro.idPrestamo !== id);
                setPrestamos(nuevosLibros);
                setVisibleFichaPrestamo(false);
                toast.current.show({ severity: 'success', summary: 'Éxito', detail: 'Libro eliminado correctamente', life: 3000 });
            })
            .catch(error => {
                console.error("Error al eliminar libro:", error);
                toast.current.show({ severity: 'error', summary: 'Error', detail: 'Error al eliminar el libro', life: 3000 });
            });
    };

    const actualizarLibro = (id, nuevoLibro) => {
        // Realizar la solicitud PUT para actualizar el libro por su ID
        axios.put(`http://localhost:8080/biblioteca/libros/${id}`, nuevoLibro)
            .then(response => {
                // Actualizar el estado de los libros con los nuevos datos
                const librosActualizados = libros.map(libro => {
                    if (libro.id === id) {
                        return response.data; // Utilizar la respuesta de la solicitud para actualizar el libro
                    }
                    return libro;
                });

                toast.current.show({ severity: 'success', summary: 'Success', detail: 'Message Content', life: 3000 });
                //setLibros(librosActualizados);
            })
            .catch(error => {
                console.error("Error al actualizar libro:", error);
            });
    };

    const actualizarCategoria = () => {
        axios.put(`http://localhost:8080/biblioteca/categorias/${categoriaInput.id}`, categoriaInput)
            .then(response => {
                const nuevasCategorias = categorias.map(cat => {
                    if (cat.id === categoriaInput.id) {
                        return categoriaInput;
                    }
                    return cat;
                });
                setvisibleFichaCategoria(false);
                toast.current.show({ severity: 'success', summary: 'Éxito', detail: 'Categoría actualizada correctamente', life: 3000 });
            })
            .catch(error => {
                console.error("Error al actualizar categoría:", error);
                toast.current.show({ severity: 'error', summary: 'Error', detail: 'Error al actualizar la categoría', life: 3000 });
            });
    };

    const modificarLibro = (libro) => {
        setLibroSeleccionado(libro);
        setLibroInput(libro);
    };
    const modificarPrestamo = (prestamo) => {
        setPrestamoSeleccionado(prestamo);
        setLibroSeleccionadoPrestamo(prestamo.libro);
        setUsuarioSeleccionadoPrestamo(prestamo.usuario);
        console.log(prestamo);
        setPrestamoInput(prestamo);
    };


    const guardarCategoria = () => {
        const nuevasCategorias = categorias.map(cat => {
            if (cat.id === categoriaInput.id) {
                return categoriaInput;
            }
            return cat;
        });

        setCategorias(nuevasCategorias);
        setvisibleFichaCategoria(false);
        actualizarCategoria();
    };
    const guardarNuevoLibro = () => {
        const nuevoLibroConCategoria = { ...libroInput, categoria: categorias.find(cat => cat.id === categoriaSeleccionadaLibro) };
        console.log(libroInput);
        axios.post("http://localhost:8080/biblioteca/libros", nuevoLibroConCategoria)
            .then(response => {
                setLibros([...libros, response.data]);
                setVisibleCrearLibro(false);
                toast.current.show({ severity: 'success', summary: 'Éxito', detail: 'Libro creado correctamente', life: 3000 });
                setLibroInput({
                    id: '',
                    nombre: '',
                    autor: '',
                    editorial: '',
                    categoria: {}
                });
                setCategoriaSeleccionadaLibro("");
            })
            .catch(error => {
                console.error("Error al crear libro:", error);
                toast.current.show({ severity: 'error', summary: 'Error', detail: 'Error al crear el libro', life: 3000 });
            });
    };
   const crearCategoria = ()=>{
    axios.post("http://localhost:8080/biblioteca/categorias", {categoria:nombreCategoria})
            .then(response => {
                setCategorias([...categorias, response.data]);
                setVisibleCrear(false);
                toast.current.show({ severity: 'success', summary: 'Éxito', detail: 'Libro creado correctamente', life: 3000 });
                
                setnombreCategoria("");
            })
            .catch(error => {
                console.error("Error al crear categoria:", error);
                toast.current.show({ severity: 'error', summary: 'Error', detail: 'Error al crear el libro', life: 3000 });
            });
   }
    const guardarLibro = () => {
        const nuevosLibros = libros.map(libro => {
            if (libro.id === libroInput.id) {
                return libroInput;
            }
            return libro;
        });

        setLibros(nuevosLibros);
        setVisibleFichaLibro(false);
        actualizarLibro(libroInput.id, libroInput);
    };

    const crearLibro = (nuevoLibro) => {
        setVisibleFichaLibro(true);
    };

    const fichaTemplate = (categoria) => {
        return (
            <Button label="Ficha" icon="pi pi-external-link" onClick={() => {
                modificarCategoria(categoria);
                setvisibleFichaCategoria(true);
            }} />
        );
    };

    const fichaLibroTemplate = (libro) => {
        return (
            <>
                <Button label="Ficha" icon="pi pi-external-link" onClick={() => {
                    modificarLibro(libro);
                    setVisibleFichaLibro(true);
                }} />

            </>
        );
    };

    const fichaPrestamoTemplate = (prestamo) => {
        return (
            <>
                <Button label="Ficha" icon="pi pi-external-link" onClick={() => {
                    modificarPrestamo(prestamo);
                    setVisibleFichaPrestamo(true);
                }} />

            </>
        );
    };
    const [visibleMostrarUsuarios, setVisibleMostrarUsuarios] = useState(false);

    // Función para abrir el diálogo de mostrar todos los usuarios
    const mostrarUsuarios = () => {
        setVisibleMostrarUsuarios(true);
    };

    // Función para cerrar el diálogo de mostrar todos los usuarios
    const cerrarMostrarUsuarios = () => {
        setVisibleMostrarUsuarios(false);
    };
    const crearUsuario = () => {
        // Realizar una solicitud POST para crear un nuevo usuario
        axios.post("http://localhost:8080/biblioteca/usuarios", usuarioInput)
            .then(response => {
                // Agregar el nuevo usuario a la lista de usuarios
                setUsuarios([...usuarios, response.data]);
                // Ocultar el diálogo de creación de usuarios
                setVisibleCrearUsuario(false);
                // Mostrar un mensaje de éxito
                toast.current.show({ severity: 'success', summary: 'Éxito', detail: 'Usuario creado correctamente', life: 3000 });
                // Limpiar los campos de entrada del usuario
                setUsuarioInput({
                    id: '',
                    nombre: '',
                    apellidos: ''
                    // Agrega más campos según sea necesario
                });
            })
            .catch(error => {
                // Manejar el error en caso de fallo en la solicitud POST
                console.error("Error al crear usuario:", error);
                // Mostrar un mensaje de error
                toast.current.show({ severity: 'error', summary: 'Error', detail: 'Error al crear el usuario', life: 3000 });
            });
    };


    const items = [
        {
            label: 'Categorias',
            icon: 'pi pi-link',
            items: [
                {
                    label: 'Ver Categorias',
                    icon: 'pi pi-list',
                    command: () => {
                        setVisible(true);
                    }
                },
                {
                    label: 'Crear Categoria', // Submenú para crear un nuevo libro
                    icon: 'pi pi-plus',
                    command: () => {
                        setVisibleCrear(true); // Mostrar el diálogo de creación de libros
                    }
                }
            ]
        },
        {
            label: 'Libros',
            icon: 'pi pi-link',
            items: [
                {
                    label: 'Ver Libros',
                    icon: 'pi pi-list',
                    command: () => {
                        setVisibleLibro(true);
                    }
                },
                {
                    label: 'Crear Libro', // Submenú para crear un nuevo libro
                    icon: 'pi pi-plus',
                    command: () => {
                        setVisibleCrearLibro(true); // Mostrar el diálogo de creación de libros
                    }
                }
            ]
        },
        {
            label: 'Prestamos',
            icon: 'pi pi-times',
            items: [
                {
                    label: 'Ver Prestamos',
                    icon: 'pi pi-list',
                    command: () => {
                        setVisiblePrestamos(true);
                    }
                },
                {
                    label: 'Crear Prestamos', // Submenú para crear un nuevo libro
                    icon: 'pi pi-plus',
                    command: () => {
                        setVisibleCrearPrestamo(true); // Mostrar el diálogo de creación de libros
                    }
                }
            ]
        },
        {
            label: 'Usuarios',
            icon: 'pi pi-link',
            items: [
                {
                    label: 'Ver Usuarios',
                    icon: 'pi pi-list',
                    command: () => {
                        setVisibleMostrarUsuarios(true);
                    }
                },
                {
                    label: 'Crear Usuarios', // Submenú para crear un nuevo libro
                    icon: 'pi pi-plus',
                    command: () => {
                        setVisibleCrearUsuario(true); // Mostrar el diálogo de creación de libros
                    }
                }
            ]
        },
        {
            label: 'Cerrar todo',
            icon: 'pi pi-times',
            command: () => {
                cerrarTodosLosDialogos()
            }
        }
    ];
    const cerrarTodosLosDialogos = () => {
        setVisible(false);
        setVisibleEditarUsuario(false);
        setVisibleMostrarUsuarios(false);
        setVisibleCrearUsuario(false);

        setVisibleLibro(false);
        setVisibleFichaLibro(false);
        setVisibleCrearLibro(false);
    };
    const botonEditarUsuario = (usuario) => {
        return (
            <Button
                label="Editar"
                className="p-button p-button-secondary"
                onClick={() => editarUsuario(usuario)}
            />
        );
    };
    const categoriaLibro = (libro) => {
        const categoriaEncontrada = categorias.find(cat => cat.id === libro.categoria.id);

        if (categoriaEncontrada) {
            return <span>{categoriaEncontrada.categoria}</span>;
        } else {
            return <span>Categoría no encontrada</span>;
        }
    }

    const eliminarUsuario = (id) => {
        // Realizar la solicitud DELETE para eliminar el usuario por su ID
        axios.delete(`http://localhost:8080/biblioteca/usuarios/delete/${id}`)
            .then(response => {
                // Filtrar los usuarios para eliminar el usuario con el ID especificado
                const nuevosUsuarios = usuarios.filter(usuario => usuario.id !== id);
                // Actualizar el estado de los usuarios con la nueva lista sin el usuario eliminado
                setUsuarios(nuevosUsuarios);
                // Mostrar un mensaje de éxito
                toast.current.show({ severity: 'success', summary: 'Éxito', detail: 'Usuario eliminado correctamente', life: 3000 });
            })
            .catch(error => {
                // Manejar el error en caso de fallo en la solicitud DELETE
                console.error("Error al eliminar usuario:", error);
                // Mostrar un mensaje de error
                toast.current.show({ severity: 'error', summary: 'Error', detail: 'Error al eliminar el usuario', life: 3000 });
            });
    };
    const buscarLibro = () => {
        // Lógica de búsqueda basada en los filtros
        const resultados = []; // Aquí deberías hacer la búsqueda real en base a los filtros
        setResultadosBusqueda(libros);
        setMostrarResultadosLibros(true); // Mostrar el segundo Dialog cuando hay resultados
    };
    const buscarUsuario = () => {
        // Lógica de búsqueda basada en los filtros
        const resultados = []; // Aquí deberías hacer la búsqueda real en base a los filtros
        setResultadosBusqueda(usuarios);
        console.log(prestamos);

        setMostrarResultadosUsuarios(true); // Mostrar el segundo Dialog cuando hay resultados
    };

    const seleccionar = (usuario) => {
        // Lógica para seleccionar el usuario
        const usuarioSeleccionadoClon = { ...usuario };
        setPrestamoInput(prevState => ({
            ...prevState,
            usuario: usuarioSeleccionadoClon
        }));
        setMostrarResultadosUsuarios(false)

        // Aquí puedes realizar cualquier otra acción que desees con el usuario seleccionado

    };
    const seleccionarLibro = (libro) => {
        // Lógica para seleccionar el usuario
        // Clona el objeto libro para evitar modificar el estado original de los libros
        const libroSeleccionadoClon = { ...libro };
        setPrestamoInput(prevState => ({
            ...prevState,
            libro: libroSeleccionadoClon
        }));
        //setLibroSeleccionadoPrestamo(libro)
        setMostrarResultadosLibros(false)


        // Aquí puedes realizar cualquier otra acción que desees con el usuario seleccionado
    };

    return (
        <div>
            <nav>
                <Toast ref={toast} />
                <Menubar model={items} />
                <Dialog
            header="Crear Nueva Categoría"
            visible={visibleCrear}
            style={{ width: '50vw' }}
            modal={false}
            onHide={() => setVisibleCrear(false)}
        >
            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                <InputText
                    value={nombreCategoria}
                    onChange={(e) => setnombreCategoria(e.target.value)}
                    placeholder="Nombre de la Categoría"
                    style={{ marginBottom: '1rem' }}
                />
                {/* Puedes agregar más campos según tus necesidades */}
                <Button onClick={crearCategoria} style={{ width: '100%' }}>Crear Categoría</Button>
            </div>
        </Dialog>
                <Dialog header="Categorias" visible={visible} modal={false} onHide={() => setVisible(false)}>
                    <DataTable value={categorias} tableStyle={{ minWidth: '50rem' }}>
                        <Column field="id" header="Id"></Column>
                        <Column field="categoria" header="Nombre"></Column>
                        <Column header="Ficha" body={fichaTemplate} />
                    </DataTable>
                </Dialog>
                <Dialog header="Libros" visible={visibleLibro} modal={false} onHide={() => setVisibleLibro(false)}>
                    <div className="p-d-flex p-ai-center">
                        <InputText
                            value={searchText}
                            onChange={(e) => setSearchText(e.target.value)}
                            placeholder="Buscar por nombre"
                            className="p-mr-2"
                        />

                        <Dropdown
                            value={sortField}
                            options={[
                                { label: 'Nombre', value: 'nombre' },
                                { label: 'Autor', value: 'autor' },
                                { label: 'Editorial', value: 'editorial' },
                                ,
                            ]}
                            onChange={(e) => setSortField(e.value)}
                            placeholder="Ordenar por"
                        />
                    </div>
                    <DataTable value={filteredLibros} tableStyle={{ minWidth: '50rem' }}>

                        <Column field="id" header="Id"></Column>
                        <Column field="nombre" header="Nombre"></Column>
                        <Column field="autor" header="Autor"></Column>
                        <Column field="editorial" header="Editorial"></Column>
                        <Column body={categoriaLibro} header="Categoria"></Column>
                        <Column header="Ficha" body={fichaLibroTemplate} />
                    </DataTable>
                </Dialog>
                

                <Dialog
                    header={"Ficha de la categoría: " + categoriaSeleccionada.categoria}
                    visible={visibleFichaCategoria}
                    style={{ width: '50vw' }}
                    modal={false}
                    onHide={() => setvisibleFichaCategoria(false)}
                >
                    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                        <div style={{ marginBottom: '1rem' }}>
                            <InputText value={categoriaInput.id} onChange={(e) => setCategoriaInput({ ...categoriaInput, id: e.target.value })} placeholder="ID de la categoría" />
                        </div>
                        <div style={{ marginBottom: '1rem' }}>
                            <InputText value={categoriaInput.categoria} onChange={(e) => setCategoriaInput({ ...categoriaInput, categoria: e.target.value })} placeholder="Nombre de la categoría" />
                        </div>
                    </div>
                    <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
                        <Button style={{ marginRight: '0.5rem' }} onClick={() => eliminarCategoria(categoriaSeleccionada.id)}>Eliminar</Button>
                        <Button onClick={guardarCategoria}>Guardar</Button>
                    </div>
                </Dialog>

                <Dialog
                    header={"Ficha del libro: " + libroSeleccionado.nombre}
                    visible={visibleFichaLibro}
                    style={{ width: '50vw' }}
                    modal={false}
                    onHide={() => setVisibleFichaLibro(false)}
                >
                    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                        <div style={{ marginBottom: '1rem' }}>
                            <InputText value={libroInput.id} placeholder="ID del libro" />
                        </div>
                        <div style={{ marginBottom: '1rem' }}>
                            <InputText value={libroInput.nombre} onChange={(e) => setLibroInput({ ...libroInput, nombre: e.target.value })} placeholder="Nombre del libro" />
                        </div>
                        <div style={{ marginBottom: '1rem' }}>
                            <InputText value={libroInput.editorial} onChange={(e) => setLibroInput({ ...libroInput, editorial: e.target.value })} placeholder="Editorial del libro" />
                        </div>
                        <div style={{ marginBottom: '1rem' }}>
                            <InputText value={libroInput.autor} onChange={(e) => setLibroInput({ ...libroInput, autor: e.target.value })} placeholder="Autor del libro" />
                        </div>
                        <div style={{ marginBottom: '1rem' }}>
                            <Dropdown
                                value={libroInput.categoria ? libroInput.categoria.id : null}
                                options={categorias.map(categoria => ({ label: categoria.categoria, value: categoria.id }))}
                                onChange={(e) => {
                                    const selectedCategory = categorias.find(cat => cat.id === e.value);
                                    setLibroInput({ ...libroInput, categoria: selectedCategory });
                                }}
                                placeholder="Seleccionar Categoría"
                            />
                        </div>
                    </div>
                    <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
                        <Button style={{ marginRight: '0.5rem' }} onClick={() => eliminarLibro(libroSeleccionado.id)}>Eliminar</Button>
                        <Button onClick={guardarLibro}>Guardar</Button>
                    </div>
                </Dialog>

                <Dialog
                    header="Crear Nuevo Libro"
                    visible={visibleCrearLibro}
                    style={{ width: '50vw' }}
                    modal={false}
                    onHide={() => setVisibleCrearLibro(false)}
                >
                    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                        {/* Agrega campos de entrada para los detalles del nuevo libro */}
                        <InputText value={libroInput.nombre} onChange={(e) => setLibroInput({ ...libroInput, nombre: e.target.value })} placeholder="Nombre del libro" style={{ marginBottom: '1rem' }} />
                        <InputText value={libroInput.autor} onChange={(e) => setLibroInput({ ...libroInput, autor: e.target.value })} placeholder="Autor del libro" style={{ marginBottom: '1rem' }} />
                        <InputText value={libroInput.editorial} onChange={(e) => setLibroInput({ ...libroInput, editorial: e.target.value })} placeholder="Editorial del libro" style={{ marginBottom: '1rem' }} />
                        <Dropdown
                            value={categoriaSeleccionadaLibro}
                            options={categorias.map(categoria => ({ label: categoria.categoria, value: categoria.id }))}
                            onChange={(e) => setCategoriaSeleccionadaLibro(e.value)}
                            placeholder="Seleccionar Categoría"
                            style={{ width: '30%', marginBottom: '1rem' }}
                        />
                        {/* Puedes agregar más campos de entrada según tus necesidades */}
                        <Button onClick={guardarNuevoLibro} style={{ width: '100%' }}>Crear Libro</Button>
                    </div>
                </Dialog>


                <Dialog
                    header={"Editar Usuario: " + usuarioSeleccionado.nombre}
                    visible={visibleEditarUsuario}
                    style={{ width: '50vw' }}
                    modal={false}
                    onHide={() => cerrarEditarUsuario()}
                >
                    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                        <div style={{ marginBottom: '1rem' }}>
                            <InputText value={usuarioInput.id} onChange={(e) => setUsuarioInput({ ...usuarioInput, id: e.target.value })} placeholder="ID del usuario" />
                        </div>
                        <div style={{ marginBottom: '1rem' }}>
                            <InputText value={usuarioInput.nombre} onChange={(e) => setUsuarioInput({ ...usuarioInput, nombre: e.target.value })} placeholder="Nombre del usuario" />
                        </div>
                        <div style={{ marginBottom: '1rem' }}>
                            <InputText value={usuarioInput.apellidos} onChange={(e) => setUsuarioInput({ ...usuarioInput, apellidos: e.target.value })} placeholder="Apellidos del usuario" />
                        </div>
                        {/* Agrega más campos según tus necesidades */}
                    </div>
                    <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
                        <Button style={{ marginRight: '0.5rem' }} onClick={() => eliminarUsuario(usuarioSeleccionado.id)}>Eliminar</Button>
                        <Button onClick={() => actualizarUsuario()}>Guardar</Button>
                    </div>
                </Dialog>


                <Dialog
                    header="Usuarios"
                    visible={visibleMostrarUsuarios}
                    style={{ width: '50vw' }}
                    modal={false}
                    onHide={cerrarMostrarUsuarios}
                >
                    {/* Contenido del diálogo */}
                    <DataTable value={usuarios} tableStyle={{ minWidth: '10rem' }}>
                        <Column field="id" header="ID"></Column>
                        <Column field="nombre" header="Nombre"></Column>
                        <Column field="apellidos" header="Apellidos"></Column>
                        <Column header="Acciones" body={(rowData) => botonEditarUsuario(rowData)} />
                        {/* Agrega más columnas según tus necesidades */}
                    </DataTable>
                </Dialog>
                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
                    <Dialog
                        header="Crear Nuevo Usuario"
                        visible={visibleCrearUsuario}
                        style={{ width: '50vw' }}
                        onHide={() => setVisibleCrearUsuario(false)}
                    >
                        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                            <div style={{ marginBottom: '1rem' }}>
                                <span className="p-float-label">
                                    <InputText
                                        id="usuario"
                                        value={usuarioInput.nombre}
                                        onChange={(e) => setUsuarioInput({ ...usuarioInput, nombre: e.target.value })}
                                        placeholder="Nombre del usuario"
                                    />
                                    <label htmlFor="usuario">Nombre</label>
                                </span>
                            </div>
                            <div style={{ marginBottom: '1rem' }}>
                                <span className="p-float-label">
                                    <InputText
                                        id="apellidos"
                                        value={usuarioInput.apellidos}
                                        onChange={(e) => setUsuarioInput({ ...usuarioInput, apellidos: e.target.value })}
                                        placeholder="Apellidos"
                                    />
                                    <label htmlFor="apellidos">Apellidos</label>
                                </span>
                            </div>
                            {/* Agrega más campos según sea necesario */}
                            <Button style={{ width: '100%', textAlign: 'center' }} onClick={crearUsuario}>Crear</Button>
                        </div>
                    </Dialog>


                    {/* PRESTAMOS */}
                    <Dialog header="Prestamos" visible={visiblePrestamos} modal={false} onHide={() => setVisiblePrestamos(false)}>

                        <DataTable value={[...prestamos]} tableStyle={{ minWidth: '50rem' }}>

                            <Column field="idPrestamo" header="Id"></Column>
                            <Column field="fechaPrestamo" header="Fecha"></Column>
                            <Column field="libro.nombre" header="Libro"></Column>
                            <Column field="usuario.nombre" header="Usuario"></Column>
                            <Column header="Ficha" body={fichaPrestamoTemplate} />

                        </DataTable>
                    </Dialog>
                    <TuComponente prestamos={prestamos} setPrestamos={setPrestamos} visibleCrearPrestamo={visibleCrearPrestamo} setVisibleCrearPrestamo={setVisibleCrearPrestamo} usuarios={usuarios} libros={libros} />
                    <Dialog
                        header={"Editar Prestamo: " + prestamoInput.idPrestamo}
                        visible={visibleFichaPrestamo}

                        modal={false}
                        onHide={() => cerrarEditarPrestamo()}
                    >
                        <div className="p-fluid p-formgrid p-grid">
                            <div className="p-field p-col" style={{ margin: '1rem' }}>
                                <label htmlFor="nombreLibro">Nombre del Libro:</label>
                                <InputText id="nombreLibro" value={prestamoInput.libro.nombre} />
                                <Button style={{ marginTop: '1rem' }} onClick={buscarLibro} >Buscar libro</Button>
                            </div>
                            <div className="p-field p-col" style={{ margin: '1rem' }}>
                                <label htmlFor="nombreUsuario">Nombre del Usuario:</label>
                                <InputText id="nombreUsuario" value={prestamoInput.usuario.nombre} />
                                <Button style={{ marginTop: '1rem' }} onClick={buscarUsuario}>Buscar Usuario</Button>
                            </div>
                            {/* Agrega más campos según tus necesidades */}
                        </div>
                        <div className="p-d-flex p-jc-center" style={{ margin: '1rem' }}>
                            <Button onClick={() => eliminarPrestamo(prestamoSeleccionado.idPrestamo)} className="p-button-danger" style={{ marginRight: '0.5rem' }}>Eliminar</Button>
                            <Button onClick={() => actualizarPrestamo()} className="p-button-success">Guardar</Button>
                        </div>
                    </Dialog>


                    <Dialog
                        header="Resultados de la Búsqueda"
                        visible={mostrarResultadosUsuarios} // Mostrar el segundo Dialog cuando se activa el estado
                        onHide={() => setMostrarResultadosUsuarios(false)} // Ocultar el segundo Dialog
                    >
                        <DataTable value={resultadosBusqueda}>
                            <Column field="nombre" header="Nombre" />
                            {/* Agrega más columnas según sea necesario */}
                            <Column body={(rowData) => (
                                <Button onClick={() => seleccionar(rowData)}>Seleccionar</Button>
                            )} />

                        </DataTable>
                    </Dialog>
                    <Dialog
                        header="Resultados de la Búsqueda"
                        visible={mostrarResultadosLibros} // Mostrar el segundo Dialog cuando se activa el estado
                        onHide={() => setMostrarResultadosLibros(false)} // Ocultar el segundo Dialog
                    >
                        <div className="p-d-flex p-ai-center">
                            <InputText
                                value={searchText}
                                onChange={(e) => setSearchText(e.target.value)}
                                placeholder="Buscar por nombre"
                                className="p-mr-2"
                            />

                            <Dropdown
                                value={sortField}
                                options={[
                                    { label: 'Nombre', value: 'nombre' },
                                    { label: 'Autor', value: 'autor' },
                                    { label: 'Editorial', value: 'editorial' },
                                    ,
                                ]}
                                onChange={(e) => setSortField(e.value)}
                                placeholder="Ordenar por"
                            />
                        </div>
                        <DataTable value={filteredLibros}>
                            <Column field="nombre" header="Nombre" />
                            {/* Agrega más columnas según sea necesario */}
                            <Column body={(rowData) => (
                                <Button onClick={() => seleccionarLibro(rowData)}>Seleccionar</Button>
                            )} />
                        </DataTable>
                    </Dialog>
                </div>

            </nav>
            <main>
                {/* Contenido */}
                <img src="https://img.freepik.com/vector-gratis/fondo-linea-elegante-hexagonal-patron_1017-19742.jpg" style={{ width: "100vw" }} />
            </main>
        </div>
    );
};

export default IndexPage;

